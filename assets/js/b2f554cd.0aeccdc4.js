"use strict";(self.webpackChunkwillemolding_github_io=self.webpackChunkwillemolding_github_io||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"dispute-games","metadata":{"permalink":"/blog/dispute-games","source":"@site/blog/Dispute-Games.md","title":"On-Chain Dispute Games - Past, Present and Future","description":"A short survey of different strategies of resolving disputes on-chain","date":"2023-09-21T00:00:00.000Z","formattedDate":"September 21, 2023","tags":[{"label":"l2","permalink":"/blog/tags/l-2"},{"label":"interoperability","permalink":"/blog/tags/interoperability"},{"label":"game-theory","permalink":"/blog/tags/game-theory"},{"label":"p2p","permalink":"/blog/tags/p-2-p"}],"readingTime":6.945,"hasTruncateMarker":false,"authors":[{"name":"Willem Olding","title":"Computer Systems Engineer, PhD","url":"https://github.com/willemolding","imageURL":"https://github.com/willemolding.png","key":"willem"}],"frontMatter":{"slug":"dispute-games","title":"On-Chain Dispute Games - Past, Present and Future","authors":["willem"],"tags":["l2","interoperability","game-theory","p2p"],"keywords":["dispute","blockchain","optimism","arbitrum","l2","optimistic","scaling"],"draft":false,"date":"2023-09-21T00:00:00.000Z","image":"https://solutions.chainsafe.io/img/post-thumbnail.png","description":"A short survey of different strategies of resolving disputes on-chain","hide_table_of_contents":false},"nextItem":{"title":"Some Attacks on Optimistic Systems","permalink":"/blog/attacks-permissionless-fraud"}},"content":"One way to think of a blockchain is as a system for verifying provable statements to alter a global state. Examples of provable statements include:\\n\\n- Proving you hold a private key corresponding to a public key by signing some data. This is how transactions are authorized to mutate the ledger.\\n- A proof-of-work (PoW)\\n- Proving you know the pre-image of a hash\\n- Proving result of executing a known, deterministic program on known data. The blockchain executes the program itself to check the result\\n- A SNARK proof of the result of executing a known program on (possibly unknown) data\\n\\nTo verify a proof, the blockchain performs the verification computation inside its execution and this can result in changes to global state. Other on-chain applications can treat the result as if it is truth.\\n\\nSome statements have a lovely property in that they are *succinct*. This means it is easier to verify them than it is to prove them (PoW, SNARK). Others take the same amount of work either way (deterministic arbitrary computation). \\n\\nWhat you might have spotted from above is that some of these are in theory provable statements but they are impractical to prove on a blockchain. For example hashing an extremely large piece of data, or checking the result of a long and complex computation.\\n\\nDispute games are multi-party protocols that, under certain economic conditions, can allow a blockchain to be convinced of a statement while only having to execute a small part of a computation when disputes arise.\\n\\n\\n## One-step Fraud Proving\\n\\nFor statements that could be proven on-chain there is an elegant solution that can avoid expensive verification costs. In a one-step fraud proof Ashley submits a statement on-chain (e.g. the result of this computation is X) along with a bond. The bond should be greater than the expected gas cost of having the chain verify the proof.\\n\\nThe statement is considered pending by the chain for a length of time known as the challenge period. During this time anyone (Bellamy) can pay the gas and force the chain to perform the check in full. This will then determine if Ashley was indeed correct and update the state accordingly. If Ashley is proven to be wrong their bond is slashed and given to Bellamy.\\n\\nImportantly, if no one challenges Ashley during the challenge period it is safe to assume the statement is true under the assumption that there is at least one observer who would have proven Ashely false if they could.\\n\\nThis approach is great for on-going protocols like rollups where it is important to keep the running cost low. It is relatively simple in its implementation and can be permissionless. \\n\\nThis design was used by the early versions of Optimism such that the rollup state transition was only computed on L1 in the case of a dispute. Another clever application is in the [Eth-NEAR Rainbow Bridge][5] where one-step fraud proofs are used to avoid performing expensive Ed25519 signature checks on Ethereum under regular operation. In recent months some projects such as [Fuel][6] have proposed using on-step fraud proofs to avoid performing expensive SNARK verification unless there is a dispute.\\n\\nThe downside to one-step proofs is they are not applicable in every case. It must be possible to fall back to executing the verification on-chain. Some types of computation are simply too large or require too much data for this to be feasible. What can be done in this case?\\n\\n## 2-party bisection dispute games\\n\\nThe [Arbitrum paper][1] first popularized bisection dispute games in the blockchain space. To understand a bisection game you first need to understand emulators and the computation trace. \\n\\nA program can be expressed as a sequence of instructions to be executed on a processor. This processor also has registers and/or memory to store state.\\n\\nExecuting the program and recording the registers+memory at after each instruction is called an execution trace. This trace may be much longer than the original program as instructions may branch or loop. For a program that terminates this execution trace can be considered a very verbose proof of the final state. A program that knows how to execute all the possible instructions and update the state accordingly (an emulator) can verify this proof.\\n\\nA program trace for any non-trivial program is absurdly huge, but it can be compressed using two clever tricks.\\n\\nThe first is that the full CPU+memory state need not be included at each step. Instead a commitment of the state (e.g. Merkle root) can be recorded instead.\\n\\nThe second applies when there are two conflicting parties in dispute about the result of executing a program. A two-party protocol can be used to reduce the trace down to the first instruction that the parties disagree upon the result of. A third trusted arbitrator (usually a blockchain runtime) can then execute only a single instruction in the trace resolve a dispute over an entire program.\\n\\nThis last trick of framing the dispute as being between two parties allows proving faults in programs in a number of steps that is logarithmic in the length of the trace, followed by the execution of a single instruction. This is incredibly powerful and has been developed by Arbitrum and the Optimism Bedrock prototype for proving rollup state transitions, along with Cartesi for proving arbitrary computations on-chain.\\n\\n### Problems\\n\\nThe problem with this approach as described is that once two players are engaged in a dispute they must both remain live in order to resolve it. There is also no way to ensure that both participants are honest so it must be possible for multiple disputes to be open on a single claim at once for the honest minority assumption to hold.\\n\\nA malicious challenger may open many dispute games on a single assertion and although they will lose their bond if they have more available funds than the defender they can eventually prevent them from being able to participate. I have written about this issue in [another article][4].\\n\\nThe usual solution to this is to limit who can participate in dispute games. This is the approach used by Arbitrum and the Optimism Bedrock prototype. This compromise places these dispute game systems in an in-between trusted federation and fully permissionless dispute games.\\n\\n## Permissionless Bisection Dispute Games\\n\\nSo can bisection style dispute games be made fully permissionless? A recent [paper by Nehab and Teixeira][1] proposes a modification to the dispute games where the participants must submit a vector commitment to the entire execution trace before the game begins. Once this has been done the game becomes permissionless as anyone can submit a step along with its inclusion proof.\\n\\nThis is an excellent solution however it has a major drawback. Execution traces are incredibly large, commonly several trillion instructions. Producing a merkle tree and associated proofs for such a long vector is prohibitive in most cases. The authors solution to this is to split the trace into stages and run \\n\\nMore recently Optimism has proposed [another design][3] which structures dispute game is structured as an n-degree tree rather than a binary tree. This allows other participants to fork off an existing dispute game when they believe participants to be fraudulent. \\n\\nBond is added incrementally at each step of the tree allowing permissionless participation. Once a game has concluded the player who asserted correctly against any branch that has been proven false can collect the bond on each of those nodes in the tree.\\n\\nThis design gives the best of both worlds allowing permissionless participation without needing to compute trace commitments. This is at the cost of increased complexity in implementation.\\n\\n## Conclusion\\n\\nDispute games are conceptually simple but designing them to be permissionless is much more challenging. Despite dispute games being proposed for use in blockchain systems more than 5 years ago, and claiming to be permissionless, there has not been a single permissionless dispute game used in production.\\n\\nOptimism has made excellent progress in the last year design dispute games that can be safe and permissionless and these will hopefully be deployed in production in the near future.\\n\\n[1]: https://www.usenix.org/system/files/conference/usenixsecurity18/sec18-kalodner.pdf \\"Arbitrum: Scalable, private smart contracts\\"\\n[2]: https://arxiv.org/pdf/2212.12439.pdf \\"Permissionless Refereed Tournaments\\"\\n[3]: https://www.youtube.com/watch?v=GaLm4iXOtOo&t=1392s& \\"Keys in Mordor Summit: Dispute Games\\"\\n[4]: https://willemolding.github.io/blog/attacks-permissionless-fraud \\"Some Attacks on Optimistic Systems\\"\\n[5]: https://near.org/blog/eth-near-rainbow-bridge \\"Eth-NEAR Rainbow Bridge\\"\\n[6]: https://fuel-labs.ghost.io/introducing-hybrid-proving/ \\"Fuel Labs - Hybrid proving\\""},{"id":"attacks-permissionless-fraud","metadata":{"permalink":"/blog/attacks-permissionless-fraud","source":"@site/blog/2023-01-04-attacks-on-optimistic-systems.md","title":"Some Attacks on Optimistic Systems","description":"In theory optimistic systems promise an honest minority assumption. Any actor can watch the state of the system progress and report fraud by challenging a particular state transition. This comes with the guarantee that they will always win a challenge game against an invalid state transition.","date":"2023-01-04T00:00:00.000Z","formattedDate":"January 4, 2023","tags":[{"label":"fault-proofs","permalink":"/blog/tags/fault-proofs"},{"label":"rollups","permalink":"/blog/tags/rollups"}],"readingTime":5.63,"hasTruncateMarker":false,"authors":[{"name":"Willem Olding","title":"Computer Systems Engineer, PhD","url":"https://github.com/willemolding","imageURL":"https://github.com/willemolding.png","key":"willem"}],"frontMatter":{"title":"Some Attacks on Optimistic Systems","slug":"attacks-permissionless-fraud","authors":"willem","tags":["fault-proofs","rollups"]},"prevItem":{"title":"On-Chain Dispute Games - Past, Present and Future","permalink":"/blog/dispute-games"},"nextItem":{"title":"On the feasibility of a Fault-proof Based Blockchain Bridge","permalink":"/blog/feasibility-fault-proof-bridges"}},"content":"In theory optimistic systems promise an honest minority assumption. Any actor can watch the state of the system progress and report fraud by challenging a particular state transition. This comes with the guarantee that they will always win a challenge game against an invalid state transition.\\n\\nIn practice though many of the optimistic rollups in production do not currently have this property. In Arbitrum for example the ability to challenge state transitions is limited to a permissioned validator set[^1]. \\n\\nI spent some time thinking about some potential attacks against permissionless optimistic systems and, at least for the model system I considered, it appears the honest minority assumption comes with some strings attached when real world considerations such as gas costs come into play.\\n\\n## Model System\\n\\nLets consider an abstracted optimistic system. This is not a rollup but rather a general iterative computation without inputs. Each state can be transitioned to the next state by executing the state transition function. \\n\\nYou could consider such a system similar to a programming loop with the state being the loop variables and  for each execution of the loop code the hash of the new loop state is submitted on-chain. \\n\\nThe challenge game itself has the following properties:\\n\\n-  Anyone can submit a new state commitment at a given sequence number (permissionless updates). This requires including a bond $B$\\n-  The first state commitment to have no open challenges after the finalization period, $T_{final}$, becomes finalized. Other submissions for the same sequence number are discarded and their bonds slashed.\\n-  Anyone can challenge an update that has not finalized (permissionless challenges). This also requires submitting a bond $B$. The submitter and the challenger are now in a challenge game.\\n-  No new challenges can be submitted after $T_{final}$. This prevents stalling attacks.\\n-  Any number of challenges can be opened on an update at once. This is required to ensure the honest minority assumption. If only a limited number of challenges are allowed then dishonest challengers could occupy all the slots.\\n-  The challenge game is a 2-party interactive game and requires on-chain submissions by both the defender (formerly submitter) and challenger. The gas cost for the defender is $g_d$ and for the challenger is $g_c$. Each participant has time to respond $T_{chal}$. \\n-  The winner of a challenge game receives half of the losers bond. The remainder of the loser bond is burnt.\\n\\nLets also define some properties of the host chain:\\n\\n- Each block has a gas limit $G$\\n- The block time is $t_{block}$\\n- A stable gas price of $p$\\n\\n## First Attack - Challenger DoS\\n\\nThis one is nothing new but will serve as a good first example using our model.\\n\\nFor this attack a malicious submitter submits an invalid state transition. They then prevent any challenger from challenging them by purchasing enough blockspace that the challenge transaction cannot fit for every block in the finalization period $T_{final}$. The cost of this attack is\\n\\n$$\\nc = (G - g_c) \\\\frac{T_{final}}{t_{block}} p \\n$$\\n\\nIt can be seen that the only system specific parameters this depends on is the finalization time and the gas cost of a challenge response. Since the gas cost is usually fixed this attack is typically protected against by using a very large finalization time (e.g. 7 days).\\n\\nThe finalization time should be selected such that the cost of executing the attack exceeds the exploitable value ever expected to be held in the system.\\n\\n## Second Attack - Challenge Flooding\\n\\nThis is an attack on an honest submitter. It is designed to steal their stake and delay finalization of the system.\\n\\nIt works by a malicious challenger submitting many ($N$) challenges on a single valid submission. The defender must respond to all of these challenges in order to defend their bond. The attack succeeds if the defender does not have sufficient funds to pay the gas to respond to all these challenges. Because the challenges are overlapping the defender cannot use the winnings from one to pay the gas for the others [^2].\\n\\nThe cost of this attack to the challenger depends on if it succeeds or fails. If it succeeds the challenger receives the defenders bond and prevents the update from finalizing. If it succeeds the cost is\\n\\n$$\\nc = N p g_{c}.\\n$$\\n\\nIf it fails the cost to the challenger is\\n\\n$$\\nc = N (B + p g_{d})\\n$$\\n\\nand the defender wins $\\\\frac{N B}{2}$. There is also a possibility of partial success where the defender can take some of the challenges but not others.\\n\\nThe conditions for this attack to be possible require an attacker with vastly more funds than the defender. The capital required to conduct this attack is\\n\\n$$\\nC_{attack} = N (B +p  g_{c})\\n$$\\n\\nand to defend against it is\\n\\n$$\\nC_{defend} = N p g_{d}\\n$$\\n\\nand so to successfully conduct this attack requires an attacker with more funds than the defender by a factor of\\n\\n$$\\n\\\\frac{B + p g_{c}}{p g_d}.\\n$$\\n\\nThe implications for this are quite significant. If we consider the existence of mega-whales (like Coinbase). These actors could successfully conduct this attack at a very low cost on almost any submitter. By doing this repeatedly they can prevent any valid updates from being accepted and stall the system. \\n\\nIf we assume the gas costs cannot be changed the only way to mitigate this attack is to increase the bond size. With a sufficiently large bond relative to the defender gas cost this simultaneously limits which actors are able to make this attack while also limiting the accounts that can participate at all.\\n\\nFrom this I conclude that for the described system the unbounded honest minority assumption does not hold. It should be reduced to an honest minority in the set of accounts with funds within a factor of $\\\\frac{p g_d}{B+ p g_{c}}$ of the largest gas token holder.\\n\\n## Looking Forward\\n\\nA recent article [^3] was published (after I wrote this blog post!) that proposes a modification to the interactive game that could allow honest actors to band together and share the gas costs. See my next article for how this could be used to protect against the challenge flooding attack.\\n\\n[^1]: https://l2beat.com/scaling/projects/arbitrum/\\n[^2]: At first glance one might think that the submitter could use the reward from one challenge game to pay the gas of the next one. This would be true if the challenge game was single-step (e.g. non-interactive) however the additional timeout period introduced by the interactive game means that the defender must wait to receive their half of the challengers bond and in this time they must respond to the other challenges or risk losing the interactive game through a timeout.\\n[^3]: https://arxiv.org/pdf/2212.12439.pdf"},{"id":"feasibility-fault-proof-bridges","metadata":{"permalink":"/blog/feasibility-fault-proof-bridges","source":"@site/blog/2022-11-05-feasibility-fault-proof-bridges.md","title":"On the feasibility of a Fault-proof Based Blockchain Bridge","description":"For the hackathon at EthBogota the ChainSafe team developed a new bridge prototype we called Zipline. This bridge uses fault proofs, the technology behind optimistic rollups, to construct a bridge. But is this actually a good idea? This article investigates some potential issues but also some paths forward to a practical version of such a bridge construction.","date":"2022-11-05T00:00:00.000Z","formattedDate":"November 5, 2022","tags":[{"label":"bridges","permalink":"/blog/tags/bridges"},{"label":"provable computation","permalink":"/blog/tags/provable-computation"},{"label":"fraud-proofs","permalink":"/blog/tags/fraud-proofs"}],"readingTime":9.625,"hasTruncateMarker":true,"authors":[{"name":"Willem Olding","title":"Computer Systems Engineer, PhD","url":"https://github.com/willemolding","imageURL":"https://github.com/willemolding.png","key":"willem"}],"frontMatter":{"title":"On the feasibility of a Fault-proof Based Blockchain Bridge","slug":"feasibility-fault-proof-bridges","authors":"willem","tags":["bridges","provable computation","fraud-proofs"]},"prevItem":{"title":"Some Attacks on Optimistic Systems","permalink":"/blog/attacks-permissionless-fraud"},"nextItem":{"title":"Zipline Lightning Talk at Gnosis Builders (Video)","permalink":"/blog/zipline-lightning"}},"content":"For the hackathon at EthBogota the ChainSafe team developed a new bridge prototype we called [Zipline](https://ethglobal.com/showcase/zipline-05w8k). This bridge uses fault proofs, the technology behind optimistic rollups, to construct a bridge. But is this actually a good idea? This article investigates some potential issues but also some paths forward to a practical version of such a bridge construction.\\n\\n\x3c!--truncate--\x3e\\n\\n## Overview\\n\\nOur project, like all great hackathon entries, is a bit of a Frankenstein. Inspired by the work on ZK bridges by Succinct Labs[^1], it uses the fault proof code from Optimism Cannon[^2] and the Eth2 light client code from Snowbridge[^3] to build a trustless block header relay for Gasper based chains (e.g. Ethereum and Gnosis Chain) to EVM chains.\\n\\nThe logic is fairly straightforward. The Altair hard-fork adds a light-client protocol to the beacon chain that allows resource constrained devices to trustlessly follow along with minimal communication and computational effort. Even this lightweight protocol is too expensive to execute within an EVM runtime and so we use fault proofs to allow off-chain execution of the light client protocol with on-chain settlement.\\n\\nIn the final Zipline protocol anyone can submit sync updates along with a sizeable bond. These updates have a challenge period during which anyone can dispute their validity and trigger the dispute resolution game (by also submitting a bond). This game uses bisection of the execution trace to resolve the instruction where fraud may have taken place. The isolated instruction is executed by the chain as the final judgement for if there was fraud or not.\\n\\nIt works exactly like fault-proof based rollups (e.g. Optimism, Arbitrum) but instead of executing transactions it is validating the light-client protocol of another chain.\\n\\n## On-chain Requirements\\n\\nIn Zipline each sync period requires the following data to update:\\n\\n- Attested block header hash\\n- Aggregate BLS committee signature and participation bitfield\\n- Next period sync committee (512 public keys)\\n- Merkle proof of new committee\\n\\nGiven an accepted prior committee the state transition function combines a subset of the committee keys to produce an aggregate public key to verify the attested block header (this is the main computation). It also needs to verify that the proposed new committee is correct. Since this is stored in the state this can be checked by verifying a Merkle state proof. The combined update ends up being around 25KB. \\n\\nTo make this data available to the provable execution we are using a technique from Cannon called the Pre-image Oracle. This allows the code running in a provable execution context to request any data by its hash. This seems slightly magical but the reason it works is that the provable execution can essentially freeze until this data has been provided to it. If the data (pre-image) cannot be provided then the challenge game cannot continue and fraud cannot be proven.\\n\\nIn our original design we went to great lengths to ensure that:\\n\\n1. The sync update data is always available\\n2. The code cannot request a hash which has no available pre-image\\n\\nWe did this by requiring that the entire sync update message is submitted to the destination chain in calldata for each update. It is then hashed by the runtime and this hash inserted into the memory trie for the provable execution. Later on the provable execution code could use this hash to request the full data using the pre-image oracle.\\n\\nThe downside to this approach is gas costs. Mostly from calldata alone the cost to make each update is around 300k gas. Not impractically expensive but not cheap either. Especially considering the bridge must pay this every 27 hours for as long as it wants to run.\\n\\n### Proposed Improvement\\n\\nLater we had the insight that for a header relay it is acceptable to rely on the origin chain to provide the data availability. This still leaves the issue of block relayers who might submit garbage hashes for which there is no available pre-image and which therefore cannot be proven as fraud.\\n\\nOur solution to this borrows an idea from state channels. It essentially adds a new kind of challenge, a pre-image challenge. A relayer submits only the hash of sync update data. If a watcher is unable to find the corresponding pre-image (and is therefore unable to check if the computation is valid) they can issue a pre-image challenge. The original relayer must then submit the pre-image on-chain within a given time period or have their bond slashed and issued to the challenger, the same penalty as fraud. The challenge should also be bonded to prevent griefing of the relayer.\\n\\nSince the only valid sync updates are produced by another blockchain there are good guarantees that this data will be available. Submitting anything other than valid updates is fraud so a challenger can be certain of their own correctness before initiating a challenge.\\n\\nIn the happy case this reduces the calldata requirements down to a single hash making Zipline incredibly cheap to run.\\n\\n## Light client Protocol - Is it suitable?\\n\\nOne strong assumption in the design is that the light-client protocol is suitable for these kinds of applications. At first glance it appears so but in reality it was made for quite a different purpose.\\n\\nIn the light-client protocol a subset of 512 validators known as the sync committee is selected to attest to the finalized block headers in their sync period (256 epochs). Every sync period this committee is rotated out and replaced with a new random committee. Committee members know one sync period in advance that they have been chosen.\\n\\nThe members of the sync committee are eligible for additional rewards for consistent signing of all the headers in their period. There are currently no penalties for sync committee misbehavior (equivocation or signing unfinalized blocks) other than missed rewards.\\n\\nThe strength of the light-client protocol is it does not require storing of the entire validator set (currently hundreds of thousands of addresses). The committee rotation can be verified with a few Merkle proofs and a previously validated block. It also significantly reduces the number of signatures that must be aggregated and validated to check block finality. This is perfect for mobile or browser devices that need to verify state or transactions in the chain.\\n\\n### An attack on a light-client bridge\\n\\nIf 2/3 of a sync committee could collude it would be trivial for them to sign a fraudulent block header which by definition would be accepted by Zipline. According to the current light-client protocol they would not even be penalized for doing so. \\n\\nCoordinating such an attack could be quite simple. Firstly there is a long time (2 sync periods or 54 hours) during which the nodes could coordinate. One could imagine a contract on the bridge destination chain that guarantees any colluding member of the committee receives a share of the value extracted from the bridge. Once the exploitable value reaches a certain threshold collusion would be an inevitability.\\n\\nEven if the sync committee could be slashed for misbehavior collusion could still be worth it if the bridge could be hacked for more than the total slashable (32 * 512 * 2/3 = ~11k Eth). With bridges consistently being hacked for value far exceeding this could be real threat for light-client based bridges.\\n\\n## Switching to Full Consensus\\n\\nWith the improvements suggested in the previous section there is actually nothing preventing Zipline from following the full Gasper consensus protocol rather than the light client. This requires more complexity in the state and inputs - the off-chain state must keep track of the entire validator set and the validators that enter/exit each epoch. It would also require aggregating a much larger verification key (1/32 of the full validator set, about 3k keys at the time of writing) to verify the finality of each block.\\n\\nThat aside in the happy case the on-chain storage and execution cost remains the same. The main difference is that this would require receiving an update for every epoch rather than every sync period so the required rate of updates is 256 times faster. The protocol must receive one update per epoch in order to follow the chain.\\n\\nThere is no doubt that this is the way forward in creating a secure bridge protocol based on Zipline. Such a bridge would inherit the economic security properties of the beacon chain (1/3 of all stake must be slashed to revert a finalized block). \\n\\n## Fault Proof Delays\\n\\nAssuming that the consensus protocol is secure, Zipline still has the same issue that other fault-proof based systems have - the challenge period delay.\\n\\nPrior to an update being accepted it must have a period during which any honest actor can observe fraud and initiate the challenge game. The question of how long this period must be is an interesting one. It must be sufficiently long to allow for:\\n\\n1. Off-chain actors to perform the computation for themselves to verify its correctness\\n2. A challenger to have a transaction included showing fraud has occurred\\n\\nThe first point is less impactful overall as the computation for Zipline can be done in just a few seconds. Far more important is the second point. When attacking targets with potentially large payoffs (e.g. a bridge) it may be economically worthwhile for the attacker to purchase all blockspace for the duration of the challenge period, effectively censoring any transactions that are trying to prove fraud. The challenge period should therefore be set such that the cost of performing such a censoring attack is greater than the potential gains.\\n\\nIt is difficult to design the period length since it depends on so many extraneous factors: the gas price, exploitable value in the bridge/rollup, chain congestion etc. This is why most fraud-proof based system adopt the arbitrary, but safe, period of 7 days. \\n\\nThe question of if this is too long to wait for a bridge I think depends on the application. For traders chasing DeFi arbitrage opportunities it is almost certainly unacceptable, however, for being a gateway by which large volumes of wrapped ether are bridged to other chains it could be perfect.\\n\\nZipline also inherits the property other optimistic rollups have that allow for fast exits. Any off-chain observer can know if they system is committing fraud or not, even if the chain doesn\'t know yet. This makes it possible for liquidity providers to front funds to users of the bridge with the knowledge that they will inevitably receive their own wrapped tokens within 7 days with zero additional risk. A token bridge based on this protocol is likely the way forward for fraud-proof based bridges however it does not help with transferring non-fungible assets or generic message passing.\\n\\n## For the Future\\n\\nFor Zipline to be safe and feasible it needs to make the switch to following the full consensus protocol rather than the light-client. This should come with minimal extra cost in the happy case as all of the computation and data remains off-chain. It does require much more frequent updates however (once per epoch rather than once per sync period). \\n\\nGiven this and the fast-exit strategy it should be possible to develop a cheap and user friendly token bridge based off of the Zipline block header relay. NFT and arbitrary message passing applications would still have to wait a full challenge period.\\n\\nIt would also be worth investigating how it could work for consensus protocols other than Gasper. Other popular BFT finality algorithms such as Tendermint and GRANDPA would be excellent candidates.\\n\\n[^1]: https://arxiv.org/abs/2210.00264\\n[^2]: https://github.com/ethereum-optimism/cannon\\n[^3]: https://github.com/Snowfork/snowbridge"},{"id":"zipline-lightning","metadata":{"permalink":"/blog/zipline-lightning","source":"@site/blog/2022-10-14-zipline-talk.md","title":"Zipline Lightning Talk at Gnosis Builders (Video)","description":"A lightning talk by Myself, Eric Tu and Cayman Nava on our project Zipline. From Evening With Gnosis Chain side event at Devcon Bogota 2022.","date":"2022-10-14T00:00:00.000Z","formattedDate":"October 14, 2022","tags":[{"label":"bridges","permalink":"/blog/tags/bridges"},{"label":"provable computation","permalink":"/blog/tags/provable-computation"},{"label":"fraud-proofs","permalink":"/blog/tags/fraud-proofs"}],"readingTime":0.2,"hasTruncateMarker":false,"authors":[{"name":"Willem Olding","title":"Computer Systems Engineer, PhD","url":"https://github.com/willemolding","imageURL":"https://github.com/willemolding.png","key":"willem"}],"frontMatter":{"title":"Zipline Lightning Talk at Gnosis Builders (Video)","slug":"zipline-lightning","authors":"willem","tags":["bridges","provable computation","fraud-proofs"]},"prevItem":{"title":"On the feasibility of a Fault-proof Based Blockchain Bridge","permalink":"/blog/feasibility-fault-proof-bridges"},"nextItem":{"title":"What is a Pre-image Oracle and why is it awesome?","permalink":"/blog/preimge-oracle"}},"content":"A lightning talk by Myself, Eric Tu and Cayman Nava on our project Zipline. From Evening With Gnosis Chain side event at Devcon Bogota 2022.\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/KkW4hLHdjrg\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>"},{"id":"preimge-oracle","metadata":{"permalink":"/blog/preimge-oracle","source":"@site/blog/2022-10-10-preimage-oracle.md","title":"What is a Pre-image Oracle and why is it awesome?","description":"A pre-image oracle is a way to lookup any piece of data (pre-image) by its hash. While this sounds impossible (and in the general case is) it is possible to write code assuming such a thing exists if it operates in a context where execution cannot continue unless the pre-image is provided by an external party.","date":"2022-10-10T00:00:00.000Z","formattedDate":"October 10, 2022","tags":[{"label":"bridges","permalink":"/blog/tags/bridges"},{"label":"provable computation","permalink":"/blog/tags/provable-computation"},{"label":"fraud-proofs","permalink":"/blog/tags/fraud-proofs"}],"readingTime":3.075,"hasTruncateMarker":true,"authors":[{"name":"Willem Olding","title":"Computer Systems Engineer, PhD","url":"https://github.com/willemolding","imageURL":"https://github.com/willemolding.png","key":"willem"}],"frontMatter":{"title":"What is a Pre-image Oracle and why is it awesome?","slug":"preimge-oracle","authors":"willem","tags":["bridges","provable computation","fraud-proofs"]},"prevItem":{"title":"Zipline Lightning Talk at Gnosis Builders (Video)","permalink":"/blog/zipline-lightning"},"nextItem":{"title":"Right now there is no such thing as web3\xa0gaming (Opinion)","permalink":"/blog/issues-with-gaming"}},"content":"A pre-image oracle is a way to lookup any piece of data (pre-image) by its hash. While this sounds impossible (and in the general case is) it is possible to write code assuming such a thing exists if it operates in a context where execution cannot continue unless the pre-image is provided by an external party.\\n\\n\x3c!--truncate--\x3e\\n\\n## Cannon Overview\\n\\nAt a high level Optimism Cannon works by compiling some computation to the MIPS instruction set (the instruction set itself isn\'t important, this was just the one they picked). This computation takes some input and produces some output.\\n\\nA full proof of a computation could be considered as the *trace* of the execution of this code. That is the snapshot of the memory + registers (state) after the execution of each opcode from some initial state.\\n\\nProving fraud in a computation can be reduced to finding two adjacent states in the trace where both parties agree on the former state but disagree on the latter. The transition between these states can be verified by executing a single MIPS opcode to verify who is correct. This is small enough for a blockchain to execute and act as the final arbitrator.\\n\\nSince the state may be large we don\'t want to submit the whole thing on-chain. Each snapshot can be turned into a Merkle tree and only the root hash posted on-chain. Since they are merklized it is enough just to submit the roots and additionally provide proofs for:\\n- The opcode.\\n- Any memory or registers the opcode reads from.\\n\\nThese can be posted on-chain by either party and one of them is always incentivised to do so (the correct one).\\n\\n## What about external data?\\n\\nThis is where the magic of the pre-image oracle comes in. Conceptually a pre-image oracle is a magic device that can return a piece of data given its hash. You can think of this as similar to how an IPFS PID is uniquely generated from data and can be used to retrieve the data from the network. **Importantly, you can always check if the oracle is lying by hashing the provided data and ensuring it matches the hash you requested.**\\n\\nIn Cannon the proving code can pretend that such an oracle exists. It works as follows:\\n\\n- The code places the hash of the data it wishes to access in a special memory slot\\n- The host environment will then magically, and instantly, place the pre-image of this hash in another designated memory range\\n\\nFrom the code\'s perspective it has the ability to retrieve any data in existance given its hash. How is this possible!? \\n\\nThis can be seen in the [code for reading the MIPS memory](https://github.com/ethereum-optimism/cannon/blob/dfac3fb2e09bb974e77e6563a64d898d049a2a90/contracts/MIPSMemory.sol#L201). It checks if the program is reading from the pre-defined pre-image oracle range `[0x31000000, 0x32000000]` and if so it checks that the hash of the data matches the hash in the hash stored in the special location (`0x30001000`).\\n\\nIt works because the host environment will simply not continue to execute if the pre-image is not provided by some actor off-chain. Since the case where the pre-image is not provided can never exist, the code can live in the happy reality where it always does.\\n\\nThis has an important implication:\\n- **If an execution requests the pre-image of a hash where the pre-image is not available then a fraud proof can never be completed.** Special care must be taken to ensure this cannot happen by ensuring the data is available in the history of the host chain (including calldata). \\n\\nBut also an amazing upside:\\n- **Verifyable computation code can access any data in the host chain history or state including anything submitted in calldata!**"},{"id":"issues-with-gaming","metadata":{"permalink":"/blog/issues-with-gaming","source":"@site/blog/2022-04-11-issues-with-blockchain-gaming.md","title":"Right now there is no such thing as web3\xa0gaming (Opinion)","description":"I\'d like to make the argument that web3 in its most idealistic form and blockchain gaming in its popular current form are fundamentally incompatible with each other.","date":"2022-04-11T00:00:00.000Z","formattedDate":"April 11, 2022","tags":[{"label":"gaming","permalink":"/blog/tags/gaming"},{"label":"tokenomics","permalink":"/blog/tags/tokenomics"}],"readingTime":4.47,"hasTruncateMarker":true,"authors":[{"name":"Willem Olding","title":"Computer Systems Engineer, PhD","url":"https://github.com/willemolding","imageURL":"https://github.com/willemolding.png","key":"willem"}],"frontMatter":{"title":"Right now there is no such thing as web3\xa0gaming (Opinion)","slug":"issues-with-gaming","authors":"willem","tags":["gaming","tokenomics"]},"prevItem":{"title":"What is a Pre-image Oracle and why is it awesome?","permalink":"/blog/preimge-oracle"},"nextItem":{"title":"Fairer Airdrops - An Investigation (Video)","permalink":"/blog/fair-airdrops"}},"content":"I\'d like to make the argument that web3 in its most idealistic form and blockchain gaming in its popular current form are fundamentally incompatible with each other.\xa0\\n\\n\x3c!--truncate--\x3e\\n\\n## Lets agree on\xa0web3\\n\\nBefore proceeding it is important to define exactly what we mean by web3. It is a notoriously difficult concept to pin down and it seems to mean various things in different contexts. In popular usage the term web3 appears to mean \'uses a blockchain\' but lets take that out of the picture. Fundamentally most web3 idealists will claim a perfect World-Wide-Web-3.0  would provide:\\n\\n- Control and Sovereignty \u200a -\u200a Users retain full control over their own data and can control how it is used. Access to protocols is not regulated by anyone.\\n- Choice \u200a- \u200aUsers are free to move between protocols and platforms and are also free to modify existing ones to better suit their needs. The protocol software must be open source to permit this.\\n- Ownership and Participation \u200a- \u200aUsers collectively own the protocols they use and have a say in how these will evolve in the future.\\n\\nAn example of something that meets all of these points today is well governed blockchain protocol. Users retain control over their data in the sense that everything they submit is public and any user running a full node can observe the state of the ledger and submit transactions. The chain can be forked at any time and, if it demonstrates an advantage over the previous version, users can migrate to a new fork. If effective governance is in place then users could participate in governance to direct future developments in the protocol.\xa0\\n\\nWhile this may meet web3 idealism, at the end of the day it only really offers a replacement to one tiny fraction of the current web\u200a-\u200apublic peer-to-peer payments. There is still a long way to go.\\n\\n## Current state of blockchain gaming\\n\\nAs it stands in 2022 the majority of blockchain games are using the technology for two main purposes:\\n\\n- Feature gating based on token/NFT ownership\\n- Rewarding users with tokens/NFTs\\n\\nIn the  first case access to features, either cosmetic or relating to the gameplay itself, is gated. Unlocking these gates requires purchasing or otherwise obtaining a token. These are the micro-transaction and DLC models from modern games with ownership delegated to a blockchain layer. It does offer some advantages such as an open market and portability for tokens.\\n\\nThe second is the so called play-to-earn model which has its origins in the MMO gaming world. Players can engage in activities which consume time and/or require skill to produce in-game rewards. These rewards might form in-game economies and may themselves un-gate certain features. The blockchain forms the ledger for ownership of rewards and allows these to integrate with the external blockchain based economies.\\n\\n## My criticisms\\n\\nAt this point I think it is pretty clear how these models are incompatible with web3 but lets go over them in detail.\\n\\nIf users truly have choice then many might chose to play a version of the game where unlocking features doesn\'t require purchasing anything at all. In fact I imagine all users would prefer to play this version of the game. The feature gating model requires games be both closed source and have some kind of DRM that takes this choice away from players and puts it in the hands of the game developers.\\n\\nThe second is even more insidious. User clients cannot interact with the blockchain directly to obtain rewards since they could modify their local copy to produce rewards with no effort. The game state needs to be globally agreed upon by all players but is far too complex to exist on the blockchain layer itself. The only solution is a server maintaining the state of players and deciding when rewards should be minted on the blockchain. In this case we have one centralized body deciding the rules of the game and retaining full control over the economy. This is how all play-to-earn games operate today. The users have no control, no choice and no ownership.\\n\\n## Is there any hope for web3\xa0gaming?\\n\\nThe current trends of micro-transactions and play-to-earn are popular because they are potentially very profitable for the developers. But there is a whole class of games that have received very little attention at all: peer-to-peer games.\\n\\nThese have captivated humans for thousands of years and many types (e.g. trading card games, board games, gambling) are simple enough to implement directly on top of existing blockchain protocols.\xa0\\n\\nUsers retain choice because at the moment they decide to engage with another player they can collectively agree on the rules they wish to play with. Take for example a battle-style trading card game. If I am playing with a friend then we can decide that the game is more fun if a particular card is nerfed or the rules are tweaked in some other way. The company that printed the card has no say in the matter.\\n\\n## In Conclusion\\n\\nI\'m a big fan of gaming and a believer in the virtues of technology based on web3 ideals. I would love to see some pioneers break out of the money-grabbing rut that the blockchain gaming world seems to be in at the moment and build something fun, novel and empowering. Shout out to Dark Forest (love your work)."},{"id":"fair-airdrops","metadata":{"permalink":"/blog/fair-airdrops","source":"@site/blog/2021-12-01-fair-airdrop.md","title":"Fairer Airdrops - An Investigation (Video)","description":"A talk from the annual ChainSafe Conference (CSCON) on how we could design better and more fair airdrops.","date":"2021-12-01T00:00:00.000Z","formattedDate":"December 1, 2021","tags":[{"label":"airdrops","permalink":"/blog/tags/airdrops"},{"label":"tokenomics","permalink":"/blog/tags/tokenomics"}],"readingTime":0.19,"hasTruncateMarker":false,"authors":[{"name":"Willem Olding","title":"Computer Systems Engineer, PhD","url":"https://github.com/willemolding","imageURL":"https://github.com/willemolding.png","key":"willem"}],"frontMatter":{"title":"Fairer Airdrops - An Investigation (Video)","slug":"fair-airdrops","authors":"willem","tags":["airdrops","tokenomics"]},"prevItem":{"title":"Right now there is no such thing as web3\xa0gaming (Opinion)","permalink":"/blog/issues-with-gaming"},"nextItem":{"title":"Intro to Polynomial Commitments (Video)","permalink":"/blog/polynomial-commitments"}},"content":"A talk from the annual ChainSafe Conference (CSCON) on how we could design better and more fair airdrops.\\n\\n<iframe width=\\"640\\" height=\\"480\\" src=\\"https://www.youtube.com/embed/V4KgcFYAX6U\\" title=\\"CSCON1 Willem Olding - Fairer Airdrops: An Investigation\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>"},{"id":"polynomial-commitments","metadata":{"permalink":"/blog/polynomial-commitments","source":"@site/blog/2021-11-03-polynomial-commitments.md","title":"Intro to Polynomial Commitments (Video)","description":"A gentle introduction to polynomial commitments and some applications","date":"2021-11-03T00:00:00.000Z","formattedDate":"November 3, 2021","tags":[{"label":"cryptography","permalink":"/blog/tags/cryptography"},{"label":"polynomial commitments","permalink":"/blog/tags/polynomial-commitments"}],"readingTime":0.125,"hasTruncateMarker":false,"authors":[{"name":"Willem Olding","title":"Computer Systems Engineer, PhD","url":"https://github.com/willemolding","imageURL":"https://github.com/willemolding.png","key":"willem"}],"frontMatter":{"title":"Intro to Polynomial Commitments (Video)","slug":"polynomial-commitments","authors":"willem","tags":["cryptography","polynomial commitments"]},"prevItem":{"title":"Fairer Airdrops - An Investigation (Video)","permalink":"/blog/fair-airdrops"},"nextItem":{"title":"Fast Exits from Optimistic Rollups (Video)","permalink":"/blog/fast-exits"}},"content":"A gentle introduction to polynomial commitments and some applications\\n\\n<iframe width=\\"640\\" height=\\"480\\" src=\\"https://www.youtube.com/embed/R47AIqaZHgs\\" title=\\"Into to Polynomial Commitments\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>"},{"id":"fast-exits","metadata":{"permalink":"/blog/fast-exits","source":"@site/blog/2021-03-31-fast-exits-video.md","title":"Fast Exits from Optimistic Rollups (Video)","description":"This is my talk at the Toronto Ethereum Developers Meetup (EDMTo) on ways to avoid the challenge period delay (typically 7 days) when transferring tokens from an optimistic rollup to its host chain.","date":"2021-03-31T00:00:00.000Z","formattedDate":"March 31, 2021","tags":[{"label":"rollups","permalink":"/blog/tags/rollups"}],"readingTime":0.29,"hasTruncateMarker":false,"authors":[{"name":"Willem Olding","title":"Computer Systems Engineer, PhD","url":"https://github.com/willemolding","imageURL":"https://github.com/willemolding.png","key":"willem"}],"frontMatter":{"title":"Fast Exits from Optimistic Rollups (Video)","slug":"fast-exits","authors":"willem","tags":["rollups"]},"prevItem":{"title":"Intro to Polynomial Commitments (Video)","permalink":"/blog/polynomial-commitments"}},"content":"This is my talk at the Toronto Ethereum Developers Meetup (EDMTo) on ways to avoid the challenge period delay (typically 7 days) when transferring tokens from an optimistic rollup to its host chain.\\n\\n<iframe width=\\"640\\" height=\\"480\\" src=\\"https://www.youtube.com/embed/B0YdD_55ckM\\" title=\\"Fast Exits from Optimistic Rollups - Willem Olding - [Toronto Ethereum Developers Meetup]\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>"}]}')}}]);